initSidebarItems({"fn":[["convert","Turns a normal, non-streaming iterator into a streaming iterator."],["convert_ref","Turns an iterator of references into a streaming iterator."],["empty","Creates an empty iterator"]],"struct":[["Cloned","A normal, non-streaming, iterator which converts the elements of a streaming iterator into owned values by cloning them."],["Convert","A streaming iterator which yields elements from a normal, non-streaming, iterator."],["ConvertRef","A streaming iterator which yields elements from an iterator of references."],["Empty","A simple iterator that returns nothing"],["Filter","A streaming iterator which filters the elements of a streaming iterator with a predicate."],["FilterMap","An iterator which both filters and maps elements of a streaming iterator with a closure."],["Fuse","A streaming iterator which is well-defined before and after iteration."],["Map","A streaming iterator which transforms the elements of a streaming iterator."],["MapRef","A streaming iterator which transforms the elements of a streaming iterator."],["Rev","A streaming iterator which returns elements in the opposite order."],["Skip","A streaming iterator which skips a number of elements in a streaming iterator."],["SkipWhile","A streaming iterator which skips initial elements that match a predicate"],["Take","A streaming iterator which only yields a limited number of elements in a streaming iterator."],["TakeWhile","A streaming iterator which only returns initial elements matching a predicate."]],"trait":[["DoubleEndedStreamingIterator","A streaming iterator able to yield elements from both ends."],["StreamingIterator","An interface for dealing with streaming iterators."]]});