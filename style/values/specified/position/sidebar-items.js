initSidebarItems({"enum":[["AutoFlow","Auto-placement algorithm Option"],["PositionComponent","The specified value of a component of a CSS `<position>`."],["X","A keyword for the X direction."],["Y","A keyword for the Y direction."]],"struct":[["GridAutoFlow","Controls how the auto-placement algorithm works specifying exactly how auto-placed items get flowed into the grid"],["NamedArea","Not associated with any particular grid item, but can be referenced from the grid-placement properties."],["TemplateAreas","https://drafts.csswg.org/css-grid/#named-grid-area"]],"trait":[["Side","Represents a side, either horizontal or vertical, of a CSS position."]],"type":[["GridTemplateAreas","This property specifies named grid areas. The syntax of this property also provides a visualization of the structure of the grid, making the overall layout of the grid container easier to understand."],["HorizontalPosition","The specified value of a horizontal position."],["LegacyHPosition","The specified value of a horizontal position."],["LegacyPosition","The specified value of a legacy CSS `<position>` Modern position syntax supports 3 and 4-value syntax. That means: If three or four values are given, then each  or  represents an offset and must be preceded by a keyword, which specifies from which edge the offset is given. For example, `bottom 10px right 20px` represents a `10px` vertical offset up from the bottom edge and a `20px` horizontal offset leftward from the right edge. If three values are given, the missing offset is assumed to be zero. But for some historical reasons we need to keep CSS Level 2 syntax which only supports up to 2-value. This type represents this 2-value syntax."],["LegacyVPosition","The specified value of a vertical position."],["Position","The specified value of a CSS `<position>`"],["VerticalPosition","The specified value of a vertical position."]]});